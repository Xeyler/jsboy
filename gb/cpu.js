cpu = {
	_cycles: 0,
	
	_r: {
		a: 0, b: 0, c: 0, d: 0, e: 0, h: 0, l: 0,
		set bc(val) {
			this.b = (val >> 8) & 0xFF;
			this.c = val & 0xFF;
		},
		get bc() {
			return (this.b << 8) + this.c;
		},
		set de(val) {
			this.d = (val >> 8) & 0xFF;
			this.e = val & 0xFF;
		},
		get de() {
			return (this.d << 8) + this.e;
		},
		set hl(val) {
			this.h = (val >> 8) & 0xFF;
			this.l = val & 0xFF;
		},
		get hl() {
			return (this.h << 8) + this.l;
		},
		f: {
			value: 0,
			set z(val) {
				this.value = val ? (this.value |= 0b10000000) : (this.value &= 0b01111111);
			},
			get z() {
				return (this.value & 0b10000000) >> 7;
			},
			set n(val) {
				this.value = val ? (this.value |= 0b01000000) : (this.value &= 0b10111111);
			},
			get n() {
				return (this.value & 0b01000000) >> 6;
			},
			set h(val) {
				this.value = val ? (this.value |= 0b00100000) : (this.value &= 0b11011111);
			},
			get h() {
				return (this.value & 0b00100000) >> 5;
			},
			set c(val) {
				this.value = val ? (this.value |= 0b00010000) : (this.value &= 0b11101111);
			},
			get c() {
				return (this.value & 0b00010000) >> 4;
			}
		},
		_pc: 0,
		_sp: 0,
		set pc(val) {
			this._pc = val & 0xFFFF;
		},
		get pc() {
			return this._pc;
		},
		set sp(val) {
			this._sp = val & 0xFFFF;
		},
		get sp() {
			return this._sp;
		},
		m: 0,
		t: 0,
		ime: false,
	},
	
	_halt: 0,
	_stop: 0,
	
	_map: [],
	_cbmap: [],
	
	reset: function() {
		cpu._r.a = 0;
		cpu._r.b = 0;
		cpu._r.c = 0;
		cpu._r.d = 0;
		cpu._r.e = 0;
		cpu._r.h = 0;
		cpu._r.l = 0;
		cpu._r.f.value = 0;
		cpu._r.pc = 0;
		cpu._r.sp = 0;
		cpu._r.m = 0;
		cpu._r.t = 0;
		cpu._r.ime = true;
	},
	
	run: function() {
		while(true) {
			var cyclesAdvanced = cpu._map[mmu.rb(cpu._r.pc++)]();
			cpu._cycles += cyclesAdvanced;
			
			gpu.advanceCycles(cyclesAdvanced);
		}
	},
	
	_ops: {
		// Misc/control instructions
		NOP: function() { return 1; },
		STOP: function() { throw new Error("opcode not implemented"); },
		HALT: function() { cpu._halt=1; return 1; },
		PREFIX: function() { return cpu._cbmap[mmu.rb(cpu._r.pc++)](); },
		DI: function() { cpu._r.ime=false; return 1; },
		EI: function() { cpu._r.ime=true; return 1; },
		XX: function() { throw { error: new Error("cpu encountered undefined opcode: 0x" + mmu.rb(cpu._r.pc-1&0xFFFF).toString(16)), registers: cpu._r} },
		
		// Jumps/calls
		JR_NZ_r8: function() { var i=mmu.rb(cpu._r.pc++); if(i&0b10000000) i=-((~i+1)&0xFF); if(cpu._r.f.z==0) { cpu._r.pc+=i; return 3; } return 2; },
		JR_Z_r8: function() {  var i=mmu.rb(cpu._r.pc++); if(i&0b10000000) i=-((~i+1)&0xFF); if(cpu._r.f.z==1) { cpu._r.pc+=i; return 3; } return 2; },
		JR_NC_r8: function() { var i=mmu.rb(cpu._r.pc++); if(i&0b10000000) i=-((~i+1)&0xFF); if(cpu._r.f.c==0) { cpu._r.pc+=i; return 3; } return 2; },
		JR_C_r8: function() { var i=mmu.rb(cpu._r.pc++); if(i&0b10000000) i=-((~i+1)&0xFF); if(cpu._r.f.c==1) { cpu._r.pc+=i; return 3; } return 2; },
		JR_r8: function() { var i=mmu.rb(cpu._r.pc++); if(i&0b10000000) i=-((~i+1)&0xFF); cpu._r.pc+=i; return 3; },
		
		JP_NZ_a16: function() { if(cpu._r.f.z==0) { cpu._r.pc=mmu.rw(cpu._r.pc); return 4; } cpu._r.pc+=2; return 3; },
		JP_Z_a16: function() { if(cpu._r.f.z==1) { cpu._r.pc=mmu.rw(cpu._r.pc); return 4; } cpu._r.pc+=2; return 3; },
		JP_NC_a16: function() { if(cpu._r.f.c==0) { cpu._r.pc=mmu.rw(cpu._r.pc); return 4; } cpu._r.pc+=2; return 3; },
		JP_C_a16: function() { if(cpu._r.f.z==1) { cpu._r.pc=mmu.rw(cpu._r.pc); return 4; } cpu._r.pc+=2; return 3; },
		JP_a16: function() { cpu._r.pc=mmu.rw(cpu._r.pc); return 4; },
		JP_HL: function() { cpu._r.pc=cpu._r.hl; return 1; },
		
		CALL_NZ_a16: function() { throw new Error("opcode not implemented"); },
		CALL_Z_a16: function() { throw new Error("opcode not implemented"); },
		CALL_NC_a16: function() { throw new Error("opcode not implemented"); },
		CALL_C_a16: function() { throw new Error("opcode not implemented"); },
		CALL_a16: function() { var i=mmu.rw(cpu._r.pc); cpu._r.pc+=2; cpu._r.sp-=2; mmu.ww(cpu._r.sp, cpu._r.pc); cpu._r.pc=i; return 6; },
		
		RET_NZ: function() { throw new Error("opcode not implemented"); },
		RET_Z: function() { throw new Error("opcode not implemented"); },
		RET_NC: function() { throw new Error("opcode not implemented"); },
		RET_C: function() { throw new Error("opcode not implemented"); },
		RET: function() { cpu._r.pc=mmu.rw(cpu._r.sp); cpu._r.sp+=2; return 4; },
		RETI: function() { throw new Error("opcode not implemented"); },
		
		RST_00H: function() { throw new Error("opcode not implemented"); },
		RST_08H: function() { throw new Error("opcode not implemented"); },
		RST_10H: function() { throw new Error("opcode not implemented"); },
		RST_18H: function() { throw new Error("opcode not implemented"); },
		RST_20H: function() { throw new Error("opcode not implemented"); },
		RST_28H: function() { throw new Error("opcode not implemented"); },
		RST_30H: function() { throw new Error("opcode not implemented"); },
		RST_38H: function() { throw new Error("opcode not implemented"); },
		
		// 8bit load/store/move instructions
		LD_A_d8: function() { cpu._r.a=mmu.rb(cpu._r.pc++); return 2; },
		LD_A_A: function() { cpu._r.a=cpu._r.a; return 2; },
		LD_A_B: function() { cpu._r.a=cpu._r.b; return 2; },
		LD_A_C: function() { cpu._r.a=cpu._r.c; return 2; },
		LD_A_D: function() { cpu._r.a=cpu._r.d; return 2; },
		LD_A_E: function() { cpu._r.a=cpu._r.e; return 2; },
		LD_A_H: function() { cpu._r.a=cpu._r.h; return 2; },
		LD_A_L: function() { cpu._r.a=cpu._r.l; return 2; },
		LD_A_vBC: function() { cpu._r.a=mmu.rb(cpu._r.bc); return 2; },
		LD_A_vDE: function() { cpu._r.a=mmu.rb(cpu._r.de); return 2; },
		LD_A_vHL: function() { cpu._r.a=mmu.rb(cpu._r.hl); return 2; },
		LD_A_vHLinc: function() { cpu._r.a=mmu.rb(cpu._r.hl++); return 2; },
		LD_A_vHLdec: function() { cpu._r.a=mmu.rb(cpu._r.hl--); return 2; },
		LD_A_va16: function() { cpu._r.a=mmu.rb(mmu.rw(cpu._r.pc)); cpu._r.pc+=2; return 4; },
		LD_A_vC: function() { cpu._r.a=mmu.rb(0xFF00+cpu._r.c); return 2; },
		LDH_A_va8: function() { cpu._r.a=mmu.rb(0xFF00+mmu.rb(cpu._r.pc++)); return 3; },
		
		LD_B_d8: function() { cpu._r.b=mmu.rb(cpu._r.pc++); return 2; },
		LD_B_A: function() { cpu._r.b=cpu._r.a; return 1; },
		LD_B_B: function() { throw new Error("opcode not implemented"); },
		LD_B_C: function() { throw new Error("opcode not implemented"); },
		LD_B_D: function() { throw new Error("opcode not implemented"); },
		LD_B_E: function() { throw new Error("opcode not implemented"); },
		LD_B_H: function() { throw new Error("opcode not implemented"); },
		LD_B_L: function() { throw new Error("opcode not implemented"); },
		LD_B_vHL: function() { throw new Error("opcode not implemented"); },
		
		LD_C_d8: function() { cpu._r.c=mmu.rb(cpu._r.pc++); return 2; },
		LD_C_A: function() { cpu._r.c=cpu._r.a; return 1; },
		LD_C_B: function() { cpu._r.c=cpu._r.b; return 1; },
		LD_C_D: function() { cpu._r.c=cpu._r.c; return 1; },
		LD_C_C: function() { cpu._r.c=cpu._r.d; return 1; },
		LD_C_E: function() { cpu._r.c=cpu._r.e; return 1; },
		LD_C_H: function() { cpu._r.c=cpu._r.h; return 1; },
		LD_C_L: function() { cpu._r.c=cpu._r.l; return 1; },
		LD_C_vHL: function() { throw new Error("opcode not implemented"); },
		
		LD_D_d8: function() { cpu._r.d=mmu.rb(cpu._r.pc++); return 2; },
		LD_D_A: function() { cpu._r.d=cpu._r.a; return 1; },
		LD_D_B: function() { throw new Error("opcode not implemented"); },
		LD_D_C: function() { throw new Error("opcode not implemented"); },
		LD_D_D: function() { throw new Error("opcode not implemented"); },
		LD_D_E: function() { throw new Error("opcode not implemented"); },
		LD_D_H: function() { throw new Error("opcode not implemented"); },
		LD_D_L: function() { throw new Error("opcode not implemented"); },
		LD_D_vHL: function() { throw new Error("opcode not implemented"); },
		
		LD_E_d8: function() { cpu._r.e=mmu.rb(cpu._r.pc++); return 2; },
		LD_E_A: function() { cpu._r.e=cpu._r.a; return 1; },
		LD_E_B: function() { throw new Error("opcode not implemented"); },
		LD_E_C: function() { throw new Error("opcode not implemented"); },
		LD_E_D: function() { throw new Error("opcode not implemented"); },
		LD_E_E: function() { throw new Error("opcode not implemented"); },
		LD_E_H: function() { throw new Error("opcode not implemented"); },
		LD_E_L: function() { throw new Error("opcode not implemented"); },
		LD_E_vHL: function() { throw new Error("opcode not implemented"); },
		
		LD_H_d8: function() { cpu._r.h=mmu.rb(cpu._r.pc++); return 2; },
		LD_H_A: function() { cpu._r.h=cpu._r.a; return 1; },
		LD_H_B: function() { throw new Error("opcode not implemented"); },
		LD_H_C: function() { throw new Error("opcode not implemented"); },
		LD_H_D: function() { throw new Error("opcode not implemented"); },
		LD_H_E: function() { throw new Error("opcode not implemented"); },
		LD_H_H: function() { throw new Error("opcode not implemented"); },
		LD_H_L: function() { throw new Error("opcode not implemented"); },
		LD_H_vHL: function() { throw new Error("opcode not implemented"); },
		
		LD_L_d8: function() { cpu._r.l=mmu.rb(cpu._r.pc++); return 2; },
		LD_L_A: function() { cpu._r.l=cpu._r.a; return 1; },
		LD_L_B: function() { throw new Error("opcode not implemented"); },
		LD_L_C: function() { throw new Error("opcode not implemented"); },
		LD_L_D: function() { throw new Error("opcode not implemented"); },
		LD_L_E: function() { throw new Error("opcode not implemented"); },
		LD_L_H: function() { throw new Error("opcode not implemented"); },
		LD_L_L: function() { throw new Error("opcode not implemented"); },
		LD_L_vHL: function() { throw new Error("opcode not implemented"); },
		
		LD_vHL_d8: function() { mmu.wb(cpu._r.hl,mmu.rb(pc++)); return 3; cpu._r.t=12;},
		LD_vHL_A: function() { mmu.wb(cpu._r.hl,cpu._r.a); return 2; },
		LD_vHL_B: function() { mmu.wb(cpu._r.hl,cpu._r.b); return 2; },
		LD_vHL_C: function() { mmu.wb(cpu._r.hl,cpu._r.c); return 2; },
		LD_vHL_D: function() { mmu.wb(cpu._r.hl,cpu._r.d); return 2; },
		LD_vHL_E: function() { mmu.wb(cpu._r.hl,cpu._r.e); return 2; },
		LD_vHL_H: function() { mmu.wb(cpu._r.hl,cpu._r.h); return 2; },
		LD_vHL_L: function() { mmu.wb(cpu._r.hl,cpu._r.l); return 2; },
		LD_vHLinc_A: function() { mmu.wb(cpu._r.hl++,cpu._r.a); return 2; },
		LD_vHLdec_A: function() { mmu.wb(cpu._r.hl--,cpu._r.a); return 2; },
		
		LD_vBC_A: function() { throw new Error("opcode not implemented"); },
		
		LD_vDE_A: function() { throw new Error("opcode not implemented"); },
		
		LD_vC_A: function() { mmu.wb(0xFF00+cpu._r.c,cpu._r.a); return 2; },
		
		LD_va16_A: function() { mmu.wb(mmu.rw(cpu._r.pc),cpu._r.a); cpu._r.pc+=2; return 4; },
		LDH_va8_A: function() { mmu.wb(0xFF00+mmu.rb(cpu._r.pc++),cpu._r.a); return 3; },
		
		// 16bit load/store/move instructions
		PUSH_BC: function() { cpu._r.sp-=2; mmu.ww(cpu._r.sp, cpu._r.bc); return 3; },
		PUSH_DE: function() { cpu._r.sp-=2; mmu.ww(cpu._r.sp, cpu._r.de); return 3; },
		PUSH_HL: function() { cpu._r.sp-=2; mmu.ww(cpu._r.sp, cpu._r.hl); return 3; },
		PUSH_AF: function() { throw new Error("opcode not implemented"); },
		POP_BC: function() { cpu._r.bc=mmu.rw(cpu._r.sp); cpu._r.sp+=2; return 3; },
		POP_DE: function() { cpu._r.de=mmu.rw(cpu._r.sp); cpu._r.sp+=2; return 3; },
		POP_HL: function() { cpu._r.hl=mmu.rw(cpu._r.sp); cpu._r.sp+=2; return 3; },
		POP_AF: function() { throw new Error("opcode not implemented"); },
		
		LD_BC_d16: function() { cpu._r.c=mmu.rb(cpu._r.pc++); cpu._r.b=mmu.rb(cpu._r.pc++); return 3; },
		LD_DE_d16: function() { cpu._r.e=mmu.rb(cpu._r.pc++); cpu._r.d=mmu.rb(cpu._r.pc++); return 3; },
		LD_HL_d16: function() { cpu._r.l=mmu.rb(cpu._r.pc++); cpu._r.h=mmu.rb(cpu._r.pc++); return 3; },
		LD_SP_d16: function() { cpu._r.sp=mmu.rw(cpu._r.pc); cpu._r.pc+=2; return 3; },
		
		LD_va16_SP: function() { throw new Error("opcode not implemented"); },
		LD_HL_SPr8: function() { throw new Error("opcode not implemented"); },
		LD_SP_HL: function() { throw new Error("opcode not implemented"); },
		
		// 8bit arithmetic/logical instructions
		INC_A: function() { cpu._r.a=(cpu._r.a+1)&0xFF; cpu._r.f.z=(cpu._r.a==0); cpu._r.f.n=0; cpu._r.f.h=(cpu._r.a>0x0F); return 1; },
		INC_B: function() { cpu._r.b=(cpu._r.b+1)&0xFF; cpu._r.f.z=(cpu._r.b==0); cpu._r.f.n=0; cpu._r.f.h=(cpu._r.b>0x0F); return 1; },
		INC_C: function() { cpu._r.c=(cpu._r.c+1)&0xFF; cpu._r.f.z=(cpu._r.c==0); cpu._r.f.n=0; cpu._r.f.h=(cpu._r.c>0x0F); return 1; },
		INC_D: function() { cpu._r.d=(cpu._r.d+1)&0xFF; cpu._r.f.z=(cpu._r.d==0); cpu._r.f.n=0; cpu._r.f.h=(cpu._r.d>0x0F); return 1; },
		INC_E: function() { cpu._r.e=(cpu._r.e+1)&0xFF; cpu._r.f.z=(cpu._r.e==0); cpu._r.f.n=0; cpu._r.f.h=(cpu._r.e>0x0F); return 1; },
		INC_H: function() { cpu._r.h=(cpu._r.h+1)&0xFF; cpu._r.f.z=(cpu._r.h==0); cpu._r.f.n=0; cpu._r.f.h=(cpu._r.h>0x0F); return 1; },
		INC_L: function() { cpu._r.l=(cpu._r.l+1)&0xFF; cpu._r.f.z=(cpu._r.l==0); cpu._r.f.n=0; cpu._r.f.h=(cpu._r.l>0x0F); return 1; },
		INC_vHL: function() { mmu.wb(cpu._r.hl,(mmu.rb(cpu._r.hl)+1)&0xFF); cpu._r.f.z=(mmu.rb(cpu._r.hl)==0); cpu._r.f.n=0; cpu._r.f.h=(mmu.rb(cpu._r.hl)>0x0F); return 3; },
		
		DEC_A: function() { cpu._r.a=(cpu._r.a-1)&0xFF; cpu._r.f.z=(cpu._r.a==0); cpu._r.f.n=0; cpu._r.f.h=(cpu._r.a>=0x0F); return 1; },
		DEC_B: function() { cpu._r.b=(cpu._r.b-1)&0xFF; cpu._r.f.z=(cpu._r.b==0); cpu._r.f.n=0; cpu._r.f.h=(cpu._r.b>=0x0F); return 1; },
		DEC_C: function() { cpu._r.c=(cpu._r.c-1)&0xFF; cpu._r.f.z=(cpu._r.c==0); cpu._r.f.n=0; cpu._r.f.h=(cpu._r.c>=0x0F); return 1; },
		DEC_D: function() { cpu._r.d=(cpu._r.d-1)&0xFF; cpu._r.f.z=(cpu._r.d==0); cpu._r.f.n=0; cpu._r.f.h=(cpu._r.d>=0x0F); return 1; },
		DEC_E: function() { cpu._r.e=(cpu._r.e-1)&0xFF; cpu._r.f.z=(cpu._r.e==0); cpu._r.f.n=0; cpu._r.f.h=(cpu._r.e>=0x0F); return 1; },
		DEC_H: function() { cpu._r.h=(cpu._r.h-1)&0xFF; cpu._r.f.z=(cpu._r.h==0); cpu._r.f.n=0; cpu._r.f.h=(cpu._r.h>=0x0F); return 1; },
		DEC_L: function() { cpu._r.l=(cpu._r.l-1)&0xFF; cpu._r.f.z=(cpu._r.l==0); cpu._r.f.n=0; cpu._r.f.h=(cpu._r.l>=0x0F); return 1; },
		DEC_vHL: function() { mmu.wb(cpu._r.hl,(mmu.rb(cpu._r.hl)-1)&0xFF); cpu._r.f.z=(mmu.rb(cpu._r.hl)==0); cpu._r.f.n=0; cpu._r.f.h=(mmu.rb(cpu._r.hl)>=0x0F); return 3; },
		
		ADD_A_A: function() { cpu._r.a+=cpu._r.a; cpu._r.f.n=0; cpu._r.f.h=(cpu._r.a>0x0F); cpu._r.f.c=(cpu._r.a>0xFF); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 1; },
		ADD_A_B: function() { cpu._r.a+=cpu._r.b; cpu._r.f.n=0; cpu._r.f.h=(cpu._r.a>0x0F); cpu._r.f.c=(cpu._r.a>0xFF); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 1; },
		ADD_A_C: function() { cpu._r.a+=cpu._r.c; cpu._r.f.n=0; cpu._r.f.h=(cpu._r.a>0x0F); cpu._r.f.c=(cpu._r.a>0xFF); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 1; },
		ADD_A_D: function() { cpu._r.a+=cpu._r.d; cpu._r.f.n=0; cpu._r.f.h=(cpu._r.a>0x0F); cpu._r.f.c=(cpu._r.a>0xFF); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 1; },
		ADD_A_E: function() { cpu._r.a+=cpu._r.e; cpu._r.f.n=0; cpu._r.f.h=(cpu._r.a>0x0F); cpu._r.f.c=(cpu._r.a>0xFF); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 1; },
		ADD_A_H: function() { cpu._r.a+=cpu._r.h; cpu._r.f.n=0; cpu._r.f.h=(cpu._r.a>0x0F); cpu._r.f.c=(cpu._r.a>0xFF); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 1; },
		ADD_A_L: function() { cpu._r.a+=cpu._r.l; cpu._r.f.n=0; cpu._r.f.h=(cpu._r.a>0x0F); cpu._r.f.c=(cpu._r.a>0xFF); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 1; },
		ADD_A_vHL: function() { cpu._r.a+=mmu.rb(cpu._r.hl); cpu._r.f.n=0; cpu._r.f.h=(cpu._r.a>0x0F); cpu._r.f.c=(cpu._r.a>0xFF); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 2; },
		ADD_A_d8: function() { cpu._r.a+=mmu.rb(cpu._r.pc++); cpu._r.f.n=0; cpu._r.f.h=(cpu._r.a>0x0F); cpu._r.f.c=(cpu._r.a>0xFF); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 2; },
		
		ADC_A_A: function() { cpu._r.a+=cpu._r.a; cpu._r.f.c=(cpu._r.a>0xFF); cpu._r.a+=cpu._r.f.c; cpu._r.f.n=0; cpu._r.f.h=(cpu._r.a>0x0F); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 1; },
		ADC_A_B: function() { cpu._r.a+=cpu._r.b; cpu._r.f.c=(cpu._r.a>0xFF); cpu._r.a+=cpu._r.f.c; cpu._r.f.n=0; cpu._r.f.h=(cpu._r.a>0x0F); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 1; },
		ADC_A_C: function() { cpu._r.a+=cpu._r.c; cpu._r.f.c=(cpu._r.a>0xFF); cpu._r.a+=cpu._r.f.c; cpu._r.f.n=0; cpu._r.f.h=(cpu._r.a>0x0F); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 1; },
		ADC_A_D: function() { cpu._r.a+=cpu._r.d; cpu._r.f.c=(cpu._r.a>0xFF); cpu._r.a+=cpu._r.f.c; cpu._r.f.n=0; cpu._r.f.h=(cpu._r.a>0x0F); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 1; },
		ADC_A_E: function() { cpu._r.a+=cpu._r.e; cpu._r.f.c=(cpu._r.a>0xFF); cpu._r.a+=cpu._r.f.c; cpu._r.f.n=0; cpu._r.f.h=(cpu._r.a>0x0F); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 1; },
		ADC_A_H: function() { cpu._r.a+=cpu._r.h; cpu._r.f.c=(cpu._r.a>0xFF); cpu._r.a+=cpu._r.f.c; cpu._r.f.n=0; cpu._r.f.h=(cpu._r.a>0x0F); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 1; },
		ADC_A_L: function() { cpu._r.a+=cpu._r.l; cpu._r.f.c=(cpu._r.a>0xFF); cpu._r.a+=cpu._r.f.c; cpu._r.f.n=0; cpu._r.f.h=(cpu._r.a>0x0F); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 1; },
		ADC_A_vHL: function() { cpu._r.a+=mmu.rb(cpu._r.hl); cpu._r.f.c=(cpu._r.a>0xFF); cpu._r.a+=cpu._r.f.c; cpu._r.f.n=0; cpu._r.f.h=(cpu._r.a>0x0F); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 2; },
		ADC_A_d8: function() { cpu._r.a+=mmu.rb(cpu._r.pc++); cpu._r.f.c=(cpu._r.a>0xFF); cpu._r.a+=cpu._r.f.c; cpu._r.f.n=0; cpu._r.f.h=(cpu._r.a>0x0F); cpu._r.a&+0xFF; cpu._r.f.z=(cpu._r.a==0); return 2; },
		
		SUB_A_A: function() { cpu._r.a-=cpu._r.a; cpu._r.f.n=1; cpu._r.f.h=(cpu._r.a<0x10); cpu._r.f.c=(cpu._r.a<0x00); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 1; },
		SUB_A_B: function() { cpu._r.a-=cpu._r.b; cpu._r.f.n=1; cpu._r.f.h=(cpu._r.a<0x10); cpu._r.f.c=(cpu._r.a<0x00); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 1; },
		SUB_A_C: function() { cpu._r.a-=cpu._r.c; cpu._r.f.n=1; cpu._r.f.h=(cpu._r.a<0x10); cpu._r.f.c=(cpu._r.a<0x00); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 1; },
		SUB_A_D: function() { cpu._r.a-=cpu._r.d; cpu._r.f.n=1; cpu._r.f.h=(cpu._r.a<0x10); cpu._r.f.c=(cpu._r.a<0x00); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 1; },
		SUB_A_E: function() { cpu._r.a-=cpu._r.e; cpu._r.f.n=1; cpu._r.f.h=(cpu._r.a<0x10); cpu._r.f.c=(cpu._r.a<0x00); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 1; },
		SUB_A_H: function() { cpu._r.a-=cpu._r.h; cpu._r.f.n=1; cpu._r.f.h=(cpu._r.a<0x10); cpu._r.f.c=(cpu._r.a<0x00); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 1; },
		SUB_A_L: function() { cpu._r.a-=cpu._r.l; cpu._r.f.n=1; cpu._r.f.h=(cpu._r.a<0x10); cpu._r.f.c=(cpu._r.a<0x00); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 1; },
		SUB_A_vHL: function() { cpu._r.a-=mmu.rb(cpu._r.hl); cpu._r.f.n=1; cpu._r.f.h=(cpu._r.a<0x10); cpu._r.f.c=(cpu._r.a<0x00); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 2; },
		SUB_A_d8: function() { cpu._r.a-=mmu.rb(cpu._r.pc++); cpu._r.f.n=1; cpu._r.f.h=(cpu._r.a<0x10); cpu._r.f.c=(cpu._r.a<0x00); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 2; },
		
		SBC_A_A: function() { cpu._r.a-=cpu._r.a; cpu._r.f.c=(cpu._r.a<0x00); cpu._r.a-=cpu._r.f.c; cpu._r.f.n=1; cpu._r.f.h=(cpu._r.a<0x10); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 1; },
		SBC_A_B: function() { cpu._r.a-=cpu._r.b; cpu._r.f.c=(cpu._r.a<0x00); cpu._r.a-=cpu._r.f.c; cpu._r.f.n=1; cpu._r.f.h=(cpu._r.a<0x10); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 1; },
		SBC_A_C: function() { cpu._r.a-=cpu._r.c; cpu._r.f.c=(cpu._r.a<0x00); cpu._r.a-=cpu._r.f.c; cpu._r.f.n=1; cpu._r.f.h=(cpu._r.a<0x10); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 1; },
		SBC_A_D: function() { cpu._r.a-=cpu._r.d; cpu._r.f.c=(cpu._r.a<0x00); cpu._r.a-=cpu._r.f.c; cpu._r.f.n=1; cpu._r.f.h=(cpu._r.a<0x10); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 1; },
		SBC_A_E: function() { cpu._r.a-=cpu._r.e; cpu._r.f.c=(cpu._r.a<0x00); cpu._r.a-=cpu._r.f.c; cpu._r.f.n=1; cpu._r.f.h=(cpu._r.a<0x10); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 1; },
		SBC_A_H: function() { cpu._r.a-=cpu._r.h; cpu._r.f.c=(cpu._r.a<0x00); cpu._r.a-=cpu._r.f.c; cpu._r.f.n=1; cpu._r.f.h=(cpu._r.a<0x10); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 1; },
		SBC_A_L: function() { cpu._r.a-=cpu._r.l; cpu._r.f.c=(cpu._r.a<0x00); cpu._r.a-=cpu._r.f.c; cpu._r.f.n=1; cpu._r.f.h=(cpu._r.a<0x10); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 1; },
		SBC_A_vHL: function() { cpu._r.a-=mmu.rb(cpu._r.hl); cpu._r.f.c=(cpu._r.a<0x00); cpu._r.a-=cpu._r.f.c; cpu._r.f.n=1; cpu._r.f.h=(cpu._r.a<0x10); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 2; },
		SBC_A_d8: function() { cpu._r.a-=mmu.rb(cpu._r.pc++); cpu._r.f.c=(cpu._r.a<0x00); cpu._r.a-=cpu._r.f.c; cpu._r.f.n=1; cpu._r.f.h=(cpu._r.a<0x10); cpu._r.a&=0xFF; cpu._r.f.z=(cpu._r.a==0); return 2; },
		
		OR_A_A: function() { cpu._r.a|=cpu._r.a; cpu._r.f.z=(cpu._r.a==0); cpu._r.f.n=0; cpu._r.f.h=0; cpu._r.f.c=0; return 1; },
		OR_A_B: function() { cpu._r.a|=cpu._r.b; cpu._r.f.z=(cpu._r.a==0); cpu._r.f.n=0; cpu._r.f.h=0; cpu._r.f.c=0; return 1; },
		OR_A_C: function() { cpu._r.a|=cpu._r.c; cpu._r.f.z=(cpu._r.a==0); cpu._r.f.n=0; cpu._r.f.h=0; cpu._r.f.c=0; return 1; },
		OR_A_D: function() { cpu._r.a|=cpu._r.d; cpu._r.f.z=(cpu._r.a==0); cpu._r.f.n=0; cpu._r.f.h=0; cpu._r.f.c=0; return 1; },
		OR_A_E: function() { cpu._r.a|=cpu._r.e; cpu._r.f.z=(cpu._r.a==0); cpu._r.f.n=0; cpu._r.f.h=0; cpu._r.f.c=0; return 1; },
		OR_A_H: function() { cpu._r.a|=cpu._r.h; cpu._r.f.z=(cpu._r.a==0); cpu._r.f.n=0; cpu._r.f.h=0; cpu._r.f.c=0; return 1; },
		OR_A_L: function() { cpu._r.a|=cpu._r.l; cpu._r.f.z=(cpu._r.a==0); cpu._r.f.n=0; cpu._r.f.h=0; cpu._r.f.c=0; return 1; },
		OR_A_vHL: function() { cpu._r.a|=mmu.rb(cpu._r.hl); cpu._r.f.z=(cpu._r.a==0); cpu._r.f.n=0; cpu._r.f.h=0; cpu._r.f.c=0; return 2; },
		OR_A_d8: function() { cpu._r.a|=mmu.rb(cpu._r.pc++); cpu._r.f.z=(cpu._r.a==0); cpu._r.f.n=0; cpu._r.f.h=0; cpu._r.f.c=0; return 2; },
		
		XOR_A_A: function() { cpu._r.a^cpu._r.a; cpu._r.f.z=(cpu._r.a==0); cpu._r.f.n=0; cpu._r.f.h=0; cpu._r.f.c=0; return 1; },
		XOR_A_B: function() { cpu._r.a^cpu._r.b; cpu._r.f.z=(cpu._r.a==0); cpu._r.f.n=0; cpu._r.f.h=0; cpu._r.f.c=0; return 1; },
		XOR_A_C: function() { cpu._r.a^cpu._r.c; cpu._r.f.z=(cpu._r.a==0); cpu._r.f.n=0; cpu._r.f.h=0; cpu._r.f.c=0; return 1; },
		XOR_A_D: function() { cpu._r.a^cpu._r.d; cpu._r.f.z=(cpu._r.a==0); cpu._r.f.n=0; cpu._r.f.h=0; cpu._r.f.c=0; return 1; },
		XOR_A_E: function() { cpu._r.a^cpu._r.e; cpu._r.f.z=(cpu._r.a==0); cpu._r.f.n=0; cpu._r.f.h=0; cpu._r.f.c=0; return 1; },
		XOR_A_H: function() { cpu._r.a^cpu._r.h; cpu._r.f.z=(cpu._r.a==0); cpu._r.f.n=0; cpu._r.f.h=0; cpu._r.f.c=0; return 1; },
		XOR_A_L: function() { cpu._r.a^cpu._r.l; cpu._r.f.z=(cpu._r.a==0); cpu._r.f.n=0; cpu._r.f.h=0; cpu._r.f.c=0; return 1; },
		XOR_A_vHL: function() { cpu._r.a^mmu.rb(cpu._r.hl); cpu._r.f.z=(cpu._r.a==0); cpu._r.f.n=0; cpu._r.f.h=0; cpu._r.f.c=0; return 2; },
		XOR_A_d8: function() { cpu._r.a^mmu.rb(cpu._r.pc++); cpu._r.f.z=(cpu._r.a==0); cpu._r.f.n=0; cpu._r.f.h=0; cpu._r.f.c=0; return 1; },
		
		AND_A_A: function() { cpu._r.a&=cpu._r.a; cpu._r.f.z=(cpu._r.a==0); cpu._r.f.n=0; cpu._r.f.h=1; cpu._r.f.c=0; return 1; },
		AND_A_B: function() { cpu._r.a&=cpu._r.b; cpu._r.f.z=(cpu._r.a==0); cpu._r.f.n=0; cpu._r.f.h=1; cpu._r.f.c=0; return 1; },
		AND_A_C: function() { cpu._r.a&=cpu._r.c; cpu._r.f.z=(cpu._r.a==0); cpu._r.f.n=0; cpu._r.f.h=1; cpu._r.f.c=0; return 1; },
		AND_A_D: function() { cpu._r.a&=cpu._r.d; cpu._r.f.z=(cpu._r.a==0); cpu._r.f.n=0; cpu._r.f.h=1; cpu._r.f.c=0; return 1; },
		AND_A_E: function() { cpu._r.a&=cpu._r.e; cpu._r.f.z=(cpu._r.a==0); cpu._r.f.n=0; cpu._r.f.h=1; cpu._r.f.c=0; return 1; },
		AND_A_H: function() { cpu._r.a&=cpu._r.h; cpu._r.f.z=(cpu._r.a==0); cpu._r.f.n=0; cpu._r.f.h=1; cpu._r.f.c=0; return 1; },
		AND_A_L: function() { cpu._r.a&=cpu._r.l; cpu._r.f.z=(cpu._r.a==0); cpu._r.f.n=0; cpu._r.f.h=1; cpu._r.f.c=0; return 1; },
		AND_A_vHL: function() { cpu._r.a&=mmu.rb(cpu._r.hl); cpu._r.f.z=(cpu._r.a==0); cpu._r.f.n=0; cpu._r.f.h=1; cpu._r.f.c=0; return 2; },
		AND_A_d8: function() { cpu._r.a&=mmu.rb(cpu._r.pc++); cpu._r.f.z=(cpu._r.a==0); cpu._r.f.n=0; cpu._r.f.h=1; cpu._r.f.c=0; return 2; },
		
		CP_A_A: function() { var result=cpu._r.a-cpu._r.a; cpu._r.f.n=1; cpu._r.f.z=(result==0); cpu._r.f.h=(result<0x10); cpu._r.f.c=(result<0x00); return 1; },
		CP_A_B: function() { var result=cpu._r.a-cpu._r.b; cpu._r.f.n=1; cpu._r.f.z=(result==0); cpu._r.f.h=(result<0x10); cpu._r.f.c=(result<0x00); return 1; },
		CP_A_C: function() { var result=cpu._r.a-cpu._r.c; cpu._r.f.n=1; cpu._r.f.z=(result==0); cpu._r.f.h=(result<0x10); cpu._r.f.c=(result<0x00); return 1; },
		CP_A_D: function() { var result=cpu._r.a-cpu._r.d; cpu._r.f.n=1; cpu._r.f.z=(result==0); cpu._r.f.h=(result<0x10); cpu._r.f.c=(result<0x00); return 1; },
		CP_A_E: function() { var result=cpu._r.a-cpu._r.e; cpu._r.f.n=1; cpu._r.f.z=(result==0); cpu._r.f.h=(result<0x10); cpu._r.f.c=(result<0x00); return 1; },
		CP_A_H: function() { var result=cpu._r.a-cpu._r.h; cpu._r.f.n=1; cpu._r.f.z=(result==0); cpu._r.f.h=(result<0x10); cpu._r.f.c=(result<0x00); return 1; },
		CP_A_L: function() { var result=cpu._r.a-cpu._r.l; cpu._r.f.n=1; cpu._r.f.z=(result==0); cpu._r.f.h=(result<0x10); cpu._r.f.c=(result<0x00); return 1; },
		CP_A_vHL: function() { var result=cpu._r.a-mmu.rb(cpu._r.hl); cpu._r.f.n=1; cpu._r.f.z=(result==0); cpu._r.f.h=(result<0x10); cpu._r.f.c=(result<0x00); return 2; },
		CP_A_d8: function() { var result=cpu._r.a-mmu.rb(cpu._r.pc++); cpu._r.f.n=1; cpu._r.f.z=(result==0); cpu._r.f.h=(result<0x10); cpu._r.f.c=(result<0x00); return 2; },
		
		CPL: function() { cpu._r.a=~cpu._r.a; cpu._r.f.n=1; cpu._r.f.h=1; return 1; },
		DAA: function() { throw new Error("opcode not implemented"); },
		CCF: function() { cpu._r.f.n=false; cpu._r.f.h=false; cpu._r.f.c=~cpu._r.f.c; return 1; },
		SCF: function() { cpu._r.f.h=false; cpu._r.f.n=false; cpu._r.f.c=true; return 1; },
		
		// 16bit arithmetic/logical instructions
		INC_BC: function() { cpu._r.c=(cpu._r.c+1)&0xFF; if(cpu._r.c==0) cpu._r.b=(cpu._r.b+1)&0xFF; return 2; },
		INC_DE: function() { cpu._r.e=(cpu._r.e+1)&0xFF; if(cpu._r.e==0) cpu._r.d=(cpu._r.d+1)&0xFF; return 2; },
		INC_HL: function() { cpu._r.l=(cpu._r.l+1)&0xFF; if(cpu._r.l==0) cpu._r.h=(cpu._r.h+1)&0xFF; return 2; },
		INC_SP: function() { cpu._r.sp=(cpu._r.sp+1); return 2; },
		
		DEC_BC: function() { cpu._r.c=(cpu._r.c-1)&0xFF; if(cpu._r.c==0xFF) cpu._r.b=(cpu._r.b-1)&0xFF; return 2; },
		DEC_DE: function() { cpu._r.e=(cpu._r.e-1)&0xFF; if(cpu._r.e==0xFF) cpu._r.d=(cpu._r.d-1)&0xFF; return 2; },
		DEC_HL: function() { cpu._r.l=(cpu._r.l-1)&0xFF; if(cpu._r.l==0xFF) cpu._r.h=(cpu._r.h-1)&0xFF; return 2; },
		DEC_SP: function() { cpu._r.sp=(cpu._r.sp-1); return 2; },
		
		ADD_HL_BC: function() { throw new Error("opcode not implemented"); },
		ADD_HL_DE: function() { throw new Error("opcode not implemented"); },
		ADD_HL_HL: function() { throw new Error("opcode not implemented"); },
		ADD_HL_SP: function() { throw new Error("opcode not implemented"); },
		
		ADD_SP_r8: function() { throw new Error("opcode not implemented"); },
		
		// 8bit rotations/shifts and bit instructions
		RLCA: function() { throw new Error("opcode not implemented"); },
		RLA: function() { var i=cpu._r.a&0b10000000; cpu._r.a=((cpu._r.a<<1)|cpu._r.f.c)&0xFF; cpu._r.f.z=0; cpu._r.f.n=0; cpu._r.f.h=0; cpu._r.f.c=i; return 1; },
		RRCA: function() { throw new Error("opcode not implemented"); },
		RRA: function() { throw new Error("opcode not implemented"); },
	},
	
	_prefixops: {
		RLC_B: function() { throw new Error("opcode not implemented"); },
		RLC_C: function() { throw new Error("opcode not implemented"); },
		RLC_D: function() { throw new Error("opcode not implemented"); },
		RLC_E: function() { throw new Error("opcode not implemented"); },
		RLC_H: function() { throw new Error("opcode not implemented"); },
		RLC_L: function() { throw new Error("opcode not implemented"); },
		RLC_vHL: function() { throw new Error("opcode not implemented"); },
		RLC_A: function() { throw new Error("opcode not implemented"); },
		
		RRC_B: function() { throw new Error("opcode not implemented"); },
		RRC_C: function() { throw new Error("opcode not implemented"); },
		RRC_D: function() { throw new Error("opcode not implemented"); },
		RRC_E: function() { throw new Error("opcode not implemented"); },
		RRC_H: function() { throw new Error("opcode not implemented"); },
		RRC_L: function() { throw new Error("opcode not implemented"); },
		RRC_vHL: function() { throw new Error("opcode not implemented"); },
		RRC_A: function() { throw new Error("opcode not implemented"); },
		
		RL_B: function() { var i=cpu._r.b&0b10000000; cpu._r.b=((cpu._r.b<<1)|cpu._r.f.c)&0xFF; cpu._r.f.z=cpu._r.b==0; cpu._r.f.n=0; cpu._r.f.h=0; cpu._r.f.c=i; return 2; },
		RL_C: function() { var i=cpu._r.c&0b10000000; cpu._r.c=((cpu._r.c<<1)|cpu._r.f.c)&0xFF; cpu._r.f.z=cpu._r.c==0; cpu._r.f.n=0; cpu._r.f.h=0; cpu._r.f.c=i; return 2; },
		RL_D: function() { var i=cpu._r.d&0b10000000; cpu._r.d=((cpu._r.d<<1)|cpu._r.f.c)&0xFF; cpu._r.f.z=cpu._r.d==0; cpu._r.f.n=0; cpu._r.f.h=0; cpu._r.f.c=i; return 2; },
		RL_H: function() { var i=cpu._r.h&0b10000000; cpu._r.h=((cpu._r.h<<1)|cpu._r.f.c)&0xFF; cpu._r.f.z=cpu._r.h==0; cpu._r.f.n=0; cpu._r.f.h=0; cpu._r.f.c=i; return 2; },
		RL_E: function() { var i=cpu._r.e&0b10000000; cpu._r.e=((cpu._r.e<<1)|cpu._r.f.c)&0xFF; cpu._r.f.z=cpu._r.e==0; cpu._r.f.n=0; cpu._r.f.h=0; cpu._r.f.c=i; return 2; },
		RL_L: function() { var i=cpu._r.l&0b10000000; cpu._r.l=((cpu._r.l<<1)|cpu._r.f.c)&0xFF; cpu._r.f.z=cpu._r.l==0; cpu._r.f.n=0; cpu._r.f.h=0; cpu._r.f.c=i; return 2; },
		RL_vHL: function() { throw new Error("opcode not implemented"); },
		RL_A: function() { var i=cpu._r.a&0b10000000; cpu._r.a=((cpu._r.a<<1)|cpu._r.f.c)&0xFF; cpu._r.f.z=cpu._r.a==0; cpu._r.f.n=0; cpu._r.f.h=0; cpu._r.f.c=i; return 2; },
		
		RR_B: function() { throw new Error("opcode not implemented"); },
		RR_C: function() { throw new Error("opcode not implemented"); },
		RR_D: function() { throw new Error("opcode not implemented"); },
		RR_E: function() { throw new Error("opcode not implemented"); },
		RR_H: function() { throw new Error("opcode not implemented"); },
		RR_L: function() { throw new Error("opcode not implemented"); },
		RR_vHL: function() { throw new Error("opcode not implemented"); },
		RR_A: function() { throw new Error("opcode not implemented"); },
		
		SLA_B: function() { throw new Error("opcode not implemented"); },
		SLA_C: function() { throw new Error("opcode not implemented"); },
		SLA_D: function() { throw new Error("opcode not implemented"); },
		SLA_E: function() { throw new Error("opcode not implemented"); },
		SLA_H: function() { throw new Error("opcode not implemented"); },
		SLA_L: function() { throw new Error("opcode not implemented"); },
		SLA_vHL: function() { throw new Error("opcode not implemented"); },
		SLA_A: function() { throw new Error("opcode not implemented"); },
		
		SRA_B: function() { throw new Error("opcode not implemented"); },
		SRA_C: function() { throw new Error("opcode not implemented"); },
		SRA_D: function() { throw new Error("opcode not implemented"); },
		SRA_E: function() { throw new Error("opcode not implemented"); },
		SRA_H: function() { throw new Error("opcode not implemented"); },
		SRA_L: function() { throw new Error("opcode not implemented"); },
		SRA_vHL: function() { throw new Error("opcode not implemented"); },
		SRA_A: function() { throw new Error("opcode not implemented"); },
		
		SWAP_B: function() { throw new Error("opcode not implemented"); },
		SWAP_C: function() { throw new Error("opcode not implemented"); },
		SWAP_D: function() { throw new Error("opcode not implemented"); },
		SWAP_E: function() { throw new Error("opcode not implemented"); },
		SWAP_H: function() { throw new Error("opcode not implemented"); },
		SWAP_L: function() { throw new Error("opcode not implemented"); },
		SWAP_vHL: function() { throw new Error("opcode not implemented"); },
		SWAP_A: function() { throw new Error("opcode not implemented"); },
		
		SRL_B: function() { throw new Error("opcode not implemented"); },
		SRL_C: function() { throw new Error("opcode not implemented"); },
		SRL_D: function() { throw new Error("opcode not implemented"); },
		SRL_E: function() { throw new Error("opcode not implemented"); },
		SRL_H: function() { throw new Error("opcode not implemented"); },
		SRL_L: function() { throw new Error("opcode not implemented"); },
		SRL_vHL: function() { throw new Error("opcode not implemented"); },
		SRL_A: function() { throw new Error("opcode not implemented"); },
		
		BIT_0_B: function() { throw new Error("opcode not implemented"); },
		BIT_0_C: function() { throw new Error("opcode not implemented"); },
		BIT_0_D: function() { throw new Error("opcode not implemented"); },
		BIT_0_E: function() { throw new Error("opcode not implemented"); },
		BIT_0_H: function() { throw new Error("opcode not implemented"); },
		BIT_0_L: function() { throw new Error("opcode not implemented"); },
		BIT_0_vHL: function() { throw new Error("opcode not implemented"); },
		BIT_0_A: function() { throw new Error("opcode not implemented"); },
		
		BIT_1_B: function() { throw new Error("opcode not implemented"); },
		BIT_1_C: function() { throw new Error("opcode not implemented"); },
		BIT_1_D: function() { throw new Error("opcode not implemented"); },
		BIT_1_E: function() { throw new Error("opcode not implemented"); },
		BIT_1_H: function() { throw new Error("opcode not implemented"); },
		BIT_1_L: function() { throw new Error("opcode not implemented"); },
		BIT_1_vHL: function() { throw new Error("opcode not implemented"); },
		BIT_1_A: function() { throw new Error("opcode not implemented"); },
		
		BIT_2_B: function() { throw new Error("opcode not implemented"); },
		BIT_2_C: function() { throw new Error("opcode not implemented"); },
		BIT_2_D: function() { throw new Error("opcode not implemented"); },
		BIT_2_E: function() { throw new Error("opcode not implemented"); },
		BIT_2_H: function() { throw new Error("opcode not implemented"); },
		BIT_2_L: function() { throw new Error("opcode not implemented"); },
		BIT_2_vHL: function() { throw new Error("opcode not implemented"); },
		BIT_2_A: function() { throw new Error("opcode not implemented"); },
		
		BIT_3_B: function() { throw new Error("opcode not implemented"); },
		BIT_3_C: function() { throw new Error("opcode not implemented"); },
		BIT_3_D: function() { throw new Error("opcode not implemented"); },
		BIT_3_E: function() { throw new Error("opcode not implemented"); },
		BIT_3_H: function() { throw new Error("opcode not implemented"); },
		BIT_3_L: function() { throw new Error("opcode not implemented"); },
		BIT_3_vHL: function() { throw new Error("opcode not implemented"); },
		BIT_3_A: function() { throw new Error("opcode not implemented"); },
		
		BIT_4_B: function() { throw new Error("opcode not implemented"); },
		BIT_4_C: function() { throw new Error("opcode not implemented"); },
		BIT_4_D: function() { throw new Error("opcode not implemented"); },
		BIT_4_E: function() { throw new Error("opcode not implemented"); },
		BIT_4_H: function() { throw new Error("opcode not implemented"); },
		BIT_4_L: function() { throw new Error("opcode not implemented"); },
		BIT_4_vHL: function() { throw new Error("opcode not implemented"); },
		BIT_4_A: function() { throw new Error("opcode not implemented"); },
		
		BIT_5_B: function() { throw new Error("opcode not implemented"); },
		BIT_5_C: function() { throw new Error("opcode not implemented"); },
		BIT_5_D: function() { throw new Error("opcode not implemented"); },
		BIT_5_E: function() { throw new Error("opcode not implemented"); },
		BIT_5_H: function() { throw new Error("opcode not implemented"); },
		BIT_5_L: function() { throw new Error("opcode not implemented"); },
		BIT_5_vHL: function() { throw new Error("opcode not implemented"); },
		BIT_5_A: function() { throw new Error("opcode not implemented"); },
		
		BIT_6_B: function() { throw new Error("opcode not implemented"); },
		BIT_6_C: function() { throw new Error("opcode not implemented"); },
		BIT_6_D: function() { throw new Error("opcode not implemented"); },
		BIT_6_E: function() { throw new Error("opcode not implemented"); },
		BIT_6_H: function() { throw new Error("opcode not implemented"); },
		BIT_6_L: function() { throw new Error("opcode not implemented"); },
		BIT_6_vHL: function() { throw new Error("opcode not implemented"); },
		BIT_6_A: function() { throw new Error("opcode not implemented"); },
		
		BIT_7_B: function() { cpu._r.f.z=!(cpu._r.b&0b10000000); cpu._r.f.n=0; cpu._r.f.h=1; return 2; },
		BIT_7_C: function() { cpu._r.f.z=!(cpu._r.c&0b10000000); cpu._r.f.n=0; cpu._r.f.h=1; return 2; },
		BIT_7_D: function() { cpu._r.f.z=!(cpu._r.d&0b10000000); cpu._r.f.n=0; cpu._r.f.h=1; return 2; },
		BIT_7_E: function() { cpu._r.f.z=!(cpu._r.e&0b10000000); cpu._r.f.n=0; cpu._r.f.h=1; return 2; },
		BIT_7_H: function() { cpu._r.f.z=!(cpu._r.h&0b10000000); cpu._r.f.n=0; cpu._r.f.h=1; return 2; },
		BIT_7_L: function() { cpu._r.f.z=!(cpu._r.l&0b10000000); cpu._r.f.n=0; cpu._r.f.h=1; return 2; },
		BIT_7_vHL: function() { cpu._r.f.z=!(mmu.rb(cpu._r.hl)&0b10000000); cpu._r.f.n=0; cpu._r.f.h=1; return 2; },
		BIT_7_A: function() { cpu._r.f.z=!(cpu._r.a&0b10000000); cpu._r.f.n=0; cpu._r.f.h=1; return 2; },
		
		RES_0_B: function() { throw new Error("opcode not implemented"); },
		RES_0_C: function() { throw new Error("opcode not implemented"); },
		RES_0_D: function() { throw new Error("opcode not implemented"); },
		RES_0_E: function() { throw new Error("opcode not implemented"); },
		RES_0_H: function() { throw new Error("opcode not implemented"); },
		RES_0_L: function() { throw new Error("opcode not implemented"); },
		RES_0_vHL: function() { throw new Error("opcode not implemented"); },
		RES_0_A: function() { throw new Error("opcode not implemented"); },
		
		RES_1_B: function() { throw new Error("opcode not implemented"); },
		RES_1_C: function() { throw new Error("opcode not implemented"); },
		RES_1_D: function() { throw new Error("opcode not implemented"); },
		RES_1_E: function() { throw new Error("opcode not implemented"); },
		RES_1_H: function() { throw new Error("opcode not implemented"); },
		RES_1_L: function() { throw new Error("opcode not implemented"); },
		RES_1_vHL: function() { throw new Error("opcode not implemented"); },
		RES_1_A: function() { throw new Error("opcode not implemented"); },
		
		RES_2_B: function() { throw new Error("opcode not implemented"); },
		RES_2_C: function() { throw new Error("opcode not implemented"); },
		RES_2_D: function() { throw new Error("opcode not implemented"); },
		RES_2_E: function() { throw new Error("opcode not implemented"); },
		RES_2_H: function() { throw new Error("opcode not implemented"); },
		RES_2_L: function() { throw new Error("opcode not implemented"); },
		RES_2_vHL: function() { throw new Error("opcode not implemented"); },
		RES_2_A: function() { throw new Error("opcode not implemented"); },
		
		RES_3_B: function() { throw new Error("opcode not implemented"); },
		RES_3_C: function() { throw new Error("opcode not implemented"); },
		RES_3_D: function() { throw new Error("opcode not implemented"); },
		RES_3_E: function() { throw new Error("opcode not implemented"); },
		RES_3_H: function() { throw new Error("opcode not implemented"); },
		RES_3_L: function() { throw new Error("opcode not implemented"); },
		RES_3_vHL: function() { throw new Error("opcode not implemented"); },
		RES_3_A: function() { throw new Error("opcode not implemented"); },
		
		RES_4_B: function() { throw new Error("opcode not implemented"); },
		RES_4_C: function() { throw new Error("opcode not implemented"); },
		RES_4_D: function() { throw new Error("opcode not implemented"); },
		RES_4_E: function() { throw new Error("opcode not implemented"); },
		RES_4_H: function() { throw new Error("opcode not implemented"); },
		RES_4_L: function() { throw new Error("opcode not implemented"); },
		RES_4_vHL: function() { throw new Error("opcode not implemented"); },
		RES_4_A: function() { throw new Error("opcode not implemented"); },
		
		RES_5_B: function() { throw new Error("opcode not implemented"); },
		RES_5_C: function() { throw new Error("opcode not implemented"); },
		RES_5_D: function() { throw new Error("opcode not implemented"); },
		RES_5_E: function() { throw new Error("opcode not implemented"); },
		RES_5_H: function() { throw new Error("opcode not implemented"); },
		RES_5_L: function() { throw new Error("opcode not implemented"); },
		RES_5_vHL: function() { throw new Error("opcode not implemented"); },
		RES_5_A: function() { throw new Error("opcode not implemented"); },
		
		RES_6_B: function() { throw new Error("opcode not implemented"); },
		RES_6_C: function() { throw new Error("opcode not implemented"); },
		RES_6_D: function() { throw new Error("opcode not implemented"); },
		RES_6_E: function() { throw new Error("opcode not implemented"); },
		RES_6_H: function() { throw new Error("opcode not implemented"); },
		RES_6_L: function() { throw new Error("opcode not implemented"); },
		RES_6_vHL: function() { throw new Error("opcode not implemented"); },
		RES_6_A: function() { throw new Error("opcode not implemented"); },
		
		RES_7_B: function() { throw new Error("opcode not implemented"); },
		RES_7_C: function() { throw new Error("opcode not implemented"); },
		RES_7_D: function() { throw new Error("opcode not implemented"); },
		RES_7_E: function() { throw new Error("opcode not implemented"); },
		RES_7_H: function() { throw new Error("opcode not implemented"); },
		RES_7_L: function() { throw new Error("opcode not implemented"); },
		RES_7_vHL: function() { throw new Error("opcode not implemented"); },
		RES_7_A: function() { throw new Error("opcode not implemented"); },
		
		SET_0_B: function() { throw new Error("opcode not implemented"); },
		SET_0_C: function() { throw new Error("opcode not implemented"); },
		SET_0_D: function() { throw new Error("opcode not implemented"); },
		SET_0_E: function() { throw new Error("opcode not implemented"); },
		SET_0_H: function() { throw new Error("opcode not implemented"); },
		SET_0_L: function() { throw new Error("opcode not implemented"); },
		SET_0_vHL: function() { throw new Error("opcode not implemented"); },
		SET_0_A: function() { throw new Error("opcode not implemented"); },
		
		SET_1_B: function() { throw new Error("opcode not implemented"); },
		SET_1_C: function() { throw new Error("opcode not implemented"); },
		SET_1_D: function() { throw new Error("opcode not implemented"); },
		SET_1_E: function() { throw new Error("opcode not implemented"); },
		SET_1_H: function() { throw new Error("opcode not implemented"); },
		SET_1_L: function() { throw new Error("opcode not implemented"); },
		SET_1_vHL: function() { throw new Error("opcode not implemented"); },
		SET_1_A: function() { throw new Error("opcode not implemented"); },
		
		SET_2_B: function() { throw new Error("opcode not implemented"); },
		SET_2_C: function() { throw new Error("opcode not implemented"); },
		SET_2_D: function() { throw new Error("opcode not implemented"); },
		SET_2_E: function() { throw new Error("opcode not implemented"); },
		SET_2_H: function() { throw new Error("opcode not implemented"); },
		SET_2_L: function() { throw new Error("opcode not implemented"); },
		SET_2_vHL: function() { throw new Error("opcode not implemented"); },
		SET_2_A: function() { throw new Error("opcode not implemented"); },
		
		SET_3_B: function() { throw new Error("opcode not implemented"); },
		SET_3_C: function() { throw new Error("opcode not implemented"); },
		SET_3_D: function() { throw new Error("opcode not implemented"); },
		SET_3_E: function() { throw new Error("opcode not implemented"); },
		SET_3_H: function() { throw new Error("opcode not implemented"); },
		SET_3_L: function() { throw new Error("opcode not implemented"); },
		SET_3_vHL: function() { throw new Error("opcode not implemented"); },
		SET_3_A: function() { throw new Error("opcode not implemented"); },
		
		SET_4_B: function() { throw new Error("opcode not implemented"); },
		SET_4_C: function() { throw new Error("opcode not implemented"); },
		SET_4_D: function() { throw new Error("opcode not implemented"); },
		SET_4_E: function() { throw new Error("opcode not implemented"); },
		SET_4_H: function() { throw new Error("opcode not implemented"); },
		SET_4_L: function() { throw new Error("opcode not implemented"); },
		SET_4_vHL: function() { throw new Error("opcode not implemented"); },
		SET_4_A: function() { throw new Error("opcode not implemented"); },
		
		SET_5_B: function() { throw new Error("opcode not implemented"); },
		SET_5_C: function() { throw new Error("opcode not implemented"); },
		SET_5_D: function() { throw new Error("opcode not implemented"); },
		SET_5_E: function() { throw new Error("opcode not implemented"); },
		SET_5_H: function() { throw new Error("opcode not implemented"); },
		SET_5_L: function() { throw new Error("opcode not implemented"); },
		SET_5_vHL: function() { throw new Error("opcode not implemented"); },
		SET_5_A: function() { throw new Error("opcode not implemented"); },
		
		SET_6_B: function() { throw new Error("opcode not implemented"); },
		SET_6_C: function() { throw new Error("opcode not implemented"); },
		SET_6_D: function() { throw new Error("opcode not implemented"); },
		SET_6_E: function() { throw new Error("opcode not implemented"); },
		SET_6_H: function() { throw new Error("opcode not implemented"); },
		SET_6_L: function() { throw new Error("opcode not implemented"); },
		SET_6_vHL: function() { throw new Error("opcode not implemented"); },
		SET_6_A: function() { throw new Error("opcode not implemented"); },
		
		SET_7_B: function() { throw new Error("opcode not implemented"); },
		SET_7_C: function() { throw new Error("opcode not implemented"); },
		SET_7_D: function() { throw new Error("opcode not implemented"); },
		SET_7_E: function() { throw new Error("opcode not implemented"); },
		SET_7_H: function() { throw new Error("opcode not implemented"); },
		SET_7_L: function() { throw new Error("opcode not implemented"); },
		SET_7_vHL: function() { throw new Error("opcode not implemented"); },
		SET_7_A: function() { throw new Error("opcode not implemented"); },
	}
};

cpu._map = [
	// 0x00
	cpu._ops.NOP,
	cpu._ops.LD_BC_d16,
	cpu._ops.LD_vBC_A,
	cpu._ops.INC_BC,
	cpu._ops.INC_B,
	cpu._ops.DEC_B,
	cpu._ops.LD_B_d8,
	cpu._ops.RLCA,
	cpu._ops.LD_va16_SP,
	cpu._ops.ADD_HL_BC,
	cpu._ops.LD_A_vBC,
	cpu._ops.DEC_BC,
	cpu._ops.INC_C,
	cpu._ops.DEC_C,
	cpu._ops.LD_C_d8,
	cpu._ops.RRCA,
	// 0x10
	cpu._ops.STOP,
	cpu._ops.LD_DE_d16,
	cpu._ops.LD_vDE_A,
	cpu._ops.INC_DE,
	cpu._ops.INC_D,
	cpu._ops.DEC_D,
	cpu._ops.LD_D_d8,
	cpu._ops.RLA,
	cpu._ops.JR_r8,
	cpu._ops.ADD_HL_DE,
	cpu._ops.LD_A_vDE,
	cpu._ops.DEC_DE,
	cpu._ops.INC_E,
	cpu._ops.DEC_E,
	cpu._ops.LD_E_d8,
	cpu._ops.RRA,
	// 0x20
	cpu._ops.JR_NZ_r8,
	cpu._ops.LD_HL_d16,
	cpu._ops.LD_vHLinc_A,
	cpu._ops.INC_HL,
	cpu._ops.INC_H,
	cpu._ops.DEC_H,
	cpu._ops.LD_H_d8,
	cpu._ops.DAA,
	cpu._ops.JR_Z_r8,
	cpu._ops.ADD_HL_HL,
	cpu._ops.LD_A_vHLinc,
	cpu._ops.DEC_HL,
	cpu._ops.INC_L,
	cpu._ops.DEC_L,
	cpu._ops.LD_L_d8,
	cpu._ops.CPL,
	// 0x30
	cpu._ops.JR_NC_r8,
	cpu._ops.LD_SP_d16,
	cpu._ops.LD_vHLdec_A,
	cpu._ops.INC_SP,
	cpu._ops.INC_vHL,
	cpu._ops.DEC_vHL,
	cpu._ops.LD_vHL_d8,
	cpu._ops.SCF,
	cpu._ops.JR_C_r8,
	cpu._ops.ADD_HL_SP,
	cpu._ops.LD_A_vHLdec,
	cpu._ops.DEC_SP,
	cpu._ops.INC_A,
	cpu._ops.DEC_A,
	cpu._ops.LD_A_d8,
	cpu._ops.CCF,
	// 0x40
	cpu._ops.LD_B_B,
	cpu._ops.LD_B_C,
	cpu._ops.LD_B_D,
	cpu._ops.LD_B_E,
	cpu._ops.LD_B_H,
	cpu._ops.LD_B_L,
	cpu._ops.LD_B_vHL,
	cpu._ops.LD_B_A,
	cpu._ops.LD_C_B,
	cpu._ops.LD_C_C,
	cpu._ops.LD_C_D,
	cpu._ops.LD_C_E,
	cpu._ops.LD_C_H,
	cpu._ops.LD_C_L,
	cpu._ops.LD_C_vHL,
	cpu._ops.LD_C_A,
	// 0x50
	cpu._ops.LD_D_B,
	cpu._ops.LD_D_C,
	cpu._ops.LD_D_D,
	cpu._ops.LD_D_E,
	cpu._ops.LD_D_H,
	cpu._ops.LD_D_L,
	cpu._ops.LD_D_vHL,
	cpu._ops.LD_D_A,
	cpu._ops.LD_E_B,
	cpu._ops.LD_E_C,
	cpu._ops.LD_E_D,
	cpu._ops.LD_E_E,
	cpu._ops.LD_E_H,
	cpu._ops.LD_E_L,
	cpu._ops.LD_E_vHL,
	cpu._ops.LD_E_A,
	// 0x60
	cpu._ops.LD_H_B,
	cpu._ops.LD_H_C,
	cpu._ops.LD_H_D,
	cpu._ops.LD_H_E,
	cpu._ops.LD_H_H,
	cpu._ops.LD_H_L,
	cpu._ops.LD_H_vHL,
	cpu._ops.LD_H_A,
	cpu._ops.LD_L_B,
	cpu._ops.LD_L_C,
	cpu._ops.LD_L_D,
	cpu._ops.LD_L_E,
	cpu._ops.LD_L_H,
	cpu._ops.LD_L_L,
	cpu._ops.LD_L_vHL,
	cpu._ops.LD_L_A,
	// 0x70
	cpu._ops.LD_vHL_B,
	cpu._ops.LD_vHL_C,
	cpu._ops.LD_vHL_D,
	cpu._ops.LD_vHL_E,
	cpu._ops.LD_vHL_H,
	cpu._ops.LD_vHL_L,
	cpu._ops.HALT,
	cpu._ops.LD_vHL_A,
	cpu._ops.LD_A_B,
	cpu._ops.LD_A_C,
	cpu._ops.LD_A_D,
	cpu._ops.LD_A_E,
	cpu._ops.LD_A_H,
	cpu._ops.LD_A_L,
	cpu._ops.LD_A_vHL,
	cpu._ops.LD_A_A,
	// 0x80
	cpu._ops.ADD_A_B,
	cpu._ops.ADD_A_C,
	cpu._ops.ADD_A_D,
	cpu._ops.ADD_A_E,
	cpu._ops.ADD_A_H,
	cpu._ops.ADD_A_L,
	cpu._ops.ADD_A_vHL,
	cpu._ops.ADD_A_A,
	cpu._ops.ADC_A_B,
	cpu._ops.ADC_A_C,
	cpu._ops.ADC_A_D,
	cpu._ops.ADC_A_E,
	cpu._ops.ADC_A_H,
	cpu._ops.ADC_A_L,
	cpu._ops.ADC_A_vHL,
	cpu._ops.ADC_A_A,
	// 0x90
	cpu._ops.SUB_A_B,
	cpu._ops.SUB_A_C,
	cpu._ops.SUB_A_D,
	cpu._ops.SUB_A_E,
	cpu._ops.SUB_A_H,
	cpu._ops.SUB_A_L,
	cpu._ops.SUB_A_vHL,
	cpu._ops.SUB_A_A,
	cpu._ops.SBC_A_B,
	cpu._ops.SBC_A_C,
	cpu._ops.SBC_A_D,
	cpu._ops.SBC_A_E,
	cpu._ops.SBC_A_H,
	cpu._ops.SBC_A_L,
	cpu._ops.SBC_A_vHL,
	cpu._ops.SBC_A_A,
	// 0xA0
	cpu._ops.AND_A_B,
	cpu._ops.AND_A_C,
	cpu._ops.AND_A_D,
	cpu._ops.AND_A_E,
	cpu._ops.AND_A_H,
	cpu._ops.AND_A_L,
	cpu._ops.AND_A_vHL,
	cpu._ops.AND_A_A,
	cpu._ops.XOR_A_B,
	cpu._ops.XOR_A_C,
	cpu._ops.XOR_A_D,
	cpu._ops.XOR_A_E,
	cpu._ops.XOR_A_H,
	cpu._ops.XOR_A_L,
	cpu._ops.XOR_A_vHL,
	cpu._ops.XOR_A_A,
	// 0xB0
	cpu._ops.OR_A_B,
	cpu._ops.OR_A_C,
	cpu._ops.OR_A_D,
	cpu._ops.OR_A_E,
	cpu._ops.OR_A_H,
	cpu._ops.OR_A_L,
	cpu._ops.OR_A_vHL,
	cpu._ops.OR_A_A,
	cpu._ops.CP_A_B,
	cpu._ops.CP_A_C,
	cpu._ops.CP_A_D,
	cpu._ops.CP_A_E,
	cpu._ops.CP_A_H,
	cpu._ops.CP_A_L,
	cpu._ops.CP_A_vHL,
	cpu._ops.CP_A_A,
	// 0xC0
	cpu._ops.RET_NZ,
	cpu._ops.POP_BC,
	cpu._ops.JP_NZ_a16,
	cpu._ops.JP_a16,
	cpu._ops.CALL_NZ_a16,
	cpu._ops.PUSH_BC,
	cpu._ops.ADD_A_d8,
	cpu._ops.RST_00H,
	cpu._ops.RET_Z,
	cpu._ops.RET,
	cpu._ops.JP_Z_a16,
	cpu._ops.PREFIX,
	cpu._ops.CALL_Z_a16,
	cpu._ops.CALL_a16,
	cpu._ops.ADC_A_d8,
	cpu._ops.RST_08H,
	// 0xD0
	cpu._ops.RET_NC,
	cpu._ops.POP_DE,
	cpu._ops.JP_NC_a16,
	cpu._ops.XX,
	cpu._ops.CALL_NC_a16,
	cpu._ops.PUSH_DE,
	cpu._ops.SUB_A_d8,
	cpu._ops.RST_10H,
	cpu._ops.RET_C,
	cpu._ops.RETI,
	cpu._ops.JP_C_a16,
	cpu._ops.XX,
	cpu._ops.CALL_C_a16,
	cpu._ops.XX,
	cpu._ops.SBC_A_d8,
	cpu._ops.RST_18H,
	// 0xE0
	cpu._ops.LDH_va8_A,
	cpu._ops.POP_HL,
	cpu._ops.LD_vC_A,
	cpu._ops.XX,
	cpu._ops.XX,
	cpu._ops.PUSH_HL,
	cpu._ops.AND_A_d8,
	cpu._ops.RST_20H,
	cpu._ops.ADD_SP_r8,
	cpu._ops.JP_HL,
	cpu._ops.LD_va16_A,
	cpu._ops.XX,
	cpu._ops.XX,
	cpu._ops.XX,
	cpu._ops.XOR_A_d8,
	cpu._ops.RST_28H,
	// 0xF0
	cpu._ops.LDH_A_va8,
	cpu._ops.POP_AF,
	cpu._ops.LD_A_vC,
	cpu._ops.DI,
	cpu._ops.XX,
	cpu._ops.PUSH_AF,
	cpu._ops.OR_A_d8,
	cpu._ops.RST_30H,
	cpu._ops.LD_HL_SPr8,
	cpu._ops.LD_SP_HL,
	cpu._ops.LD_A_va16,
	cpu._ops.EI,
	cpu._ops.XX,
	cpu._ops.XX,
	cpu._ops.CP_A_d8,
	cpu._ops.RST_38H
];

cpu._cbmap = [
	// 0x00
	cpu._prefixops.RLC_B,
	cpu._prefixops.RLC_C,
	cpu._prefixops.RLC_D,
	cpu._prefixops.RLC_E,
	cpu._prefixops.RLC_H,
	cpu._prefixops.RLC_L,
	cpu._prefixops.RLC_vHL,
	cpu._prefixops.RLC_A,
	cpu._prefixops.RRC_B,
	cpu._prefixops.RRC_C,
	cpu._prefixops.RRC_D,
	cpu._prefixops.RRC_E,
	cpu._prefixops.RRC_H,
	cpu._prefixops.RRC_L,
	cpu._prefixops.RRC_vHL,
	cpu._prefixops.RRC_A,
	// 0x10
	cpu._prefixops.RL_B,
	cpu._prefixops.RL_C,
	cpu._prefixops.RL_D,
	cpu._prefixops.RL_E,
	cpu._prefixops.RL_H,
	cpu._prefixops.RL_L,
	cpu._prefixops.RL_vHL,
	cpu._prefixops.RL_A,
	cpu._prefixops.RR_B,
	cpu._prefixops.RR_C,
	cpu._prefixops.RR_D,
	cpu._prefixops.RR_E,
	cpu._prefixops.RR_H,
	cpu._prefixops.RR_L,
	cpu._prefixops.RR_vHL,
	cpu._prefixops.RR_A,
	// 0x20
	cpu._prefixops.SLA_B,
	cpu._prefixops.SLA_C,
	cpu._prefixops.SLA_D,
	cpu._prefixops.SLA_E,
	cpu._prefixops.SLA_H,
	cpu._prefixops.SLA_L,
	cpu._prefixops.SLA_vHL,
	cpu._prefixops.SLA_A,
	cpu._prefixops.SRA_B,
	cpu._prefixops.SRA_C,
	cpu._prefixops.SRA_D,
	cpu._prefixops.SRA_E,
	cpu._prefixops.SRA_H,
	cpu._prefixops.SRA_L,
	cpu._prefixops.SRA_vHL,
	cpu._prefixops.SRA_A,
	// 0x30
	cpu._prefixops.SWAP_B,
	cpu._prefixops.SWAP_C,
	cpu._prefixops.SWAP_D,
	cpu._prefixops.SWAP_E,
	cpu._prefixops.SWAP_H,
	cpu._prefixops.SWAP_L,
	cpu._prefixops.SWAP_vHL,
	cpu._prefixops.SWAP_A,
	cpu._prefixops.SRL_B,
	cpu._prefixops.SRL_C,
	cpu._prefixops.SRL_D,
	cpu._prefixops.SRL_E,
	cpu._prefixops.SRL_H,
	cpu._prefixops.SRL_L,
	cpu._prefixops.SRL_vHL,
	cpu._prefixops.SRL_A,
	// 0x40
	cpu._prefixops.BIT_0_B,
	cpu._prefixops.BIT_0_C,
	cpu._prefixops.BIT_0_D,
	cpu._prefixops.BIT_0_E,
	cpu._prefixops.BIT_0_H,
	cpu._prefixops.BIT_0_L,
	cpu._prefixops.BIT_0_vHL,
	cpu._prefixops.BIT_0_A,
	cpu._prefixops.BIT_1_B,
	cpu._prefixops.BIT_1_C,
	cpu._prefixops.BIT_1_D,
	cpu._prefixops.BIT_1_E,
	cpu._prefixops.BIT_1_H,
	cpu._prefixops.BIT_1_L,
	cpu._prefixops.BIT_1_vHL,
	cpu._prefixops.BIT_1_A,
	// 0x50
	cpu._prefixops.BIT_2_B,
	cpu._prefixops.BIT_2_C,
	cpu._prefixops.BIT_2_D,
	cpu._prefixops.BIT_2_E,
	cpu._prefixops.BIT_2_H,
	cpu._prefixops.BIT_2_L,
	cpu._prefixops.BIT_2_vHL,
	cpu._prefixops.BIT_2_A,
	cpu._prefixops.BIT_3_B,
	cpu._prefixops.BIT_3_C,
	cpu._prefixops.BIT_3_D,
	cpu._prefixops.BIT_3_E,
	cpu._prefixops.BIT_3_H,
	cpu._prefixops.BIT_3_L,
	cpu._prefixops.BIT_3_vHL,
	cpu._prefixops.BIT_3_A,
	// 0x60
	cpu._prefixops.BIT_4_B,
	cpu._prefixops.BIT_4_C,
	cpu._prefixops.BIT_4_D,
	cpu._prefixops.BIT_4_E,
	cpu._prefixops.BIT_4_H,
	cpu._prefixops.BIT_4_L,
	cpu._prefixops.BIT_4_vHL,
	cpu._prefixops.BIT_4_A,
	cpu._prefixops.BIT_5_B,
	cpu._prefixops.BIT_5_C,
	cpu._prefixops.BIT_5_D,
	cpu._prefixops.BIT_5_E,
	cpu._prefixops.BIT_5_H,
	cpu._prefixops.BIT_5_L,
	cpu._prefixops.BIT_5_vHL,
	cpu._prefixops.BIT_5_A,
	// 0x70
	cpu._prefixops.BIT_6_B,
	cpu._prefixops.BIT_6_C,
	cpu._prefixops.BIT_6_D,
	cpu._prefixops.BIT_6_E,
	cpu._prefixops.BIT_6_H,
	cpu._prefixops.BIT_6_L,
	cpu._prefixops.BIT_6_vHL,
	cpu._prefixops.BIT_6_A,
	cpu._prefixops.BIT_7_B,
	cpu._prefixops.BIT_7_C,
	cpu._prefixops.BIT_7_D,
	cpu._prefixops.BIT_7_E,
	cpu._prefixops.BIT_7_H,
	cpu._prefixops.BIT_7_L,
	cpu._prefixops.BIT_7_vHL,
	cpu._prefixops.BIT_7_A,
	// 0x80
	cpu._prefixops.RES_0_B,
	cpu._prefixops.RES_0_C,
	cpu._prefixops.RES_0_D,
	cpu._prefixops.RES_0_E,
	cpu._prefixops.RES_0_H,
	cpu._prefixops.RES_0_L,
	cpu._prefixops.RES_0_vHL,
	cpu._prefixops.RES_0_A,
	cpu._prefixops.RES_1_B,
	cpu._prefixops.RES_1_C,
	cpu._prefixops.RES_1_D,
	cpu._prefixops.RES_1_E,
	cpu._prefixops.RES_1_H,
	cpu._prefixops.RES_1_L,
	cpu._prefixops.RES_1_vHL,
	cpu._prefixops.RES_1_A,
	// 0x90
	cpu._prefixops.RES_2_B,
	cpu._prefixops.RES_2_C,
	cpu._prefixops.RES_2_D,
	cpu._prefixops.RES_2_E,
	cpu._prefixops.RES_2_H,
	cpu._prefixops.RES_2_L,
	cpu._prefixops.RES_2_vHL,
	cpu._prefixops.RES_2_A,
	cpu._prefixops.RES_3_B,
	cpu._prefixops.RES_3_C,
	cpu._prefixops.RES_3_D,
	cpu._prefixops.RES_3_E,
	cpu._prefixops.RES_3_H,
	cpu._prefixops.RES_3_L,
	cpu._prefixops.RES_3_vHL,
	cpu._prefixops.RES_3_A,
	// 0xA0
	cpu._prefixops.RES_4_B,
	cpu._prefixops.RES_4_C,
	cpu._prefixops.RES_4_D,
	cpu._prefixops.RES_4_E,
	cpu._prefixops.RES_4_H,
	cpu._prefixops.RES_4_L,
	cpu._prefixops.RES_4_vHL,
	cpu._prefixops.RES_4_A,
	cpu._prefixops.RES_5_B,
	cpu._prefixops.RES_5_C,
	cpu._prefixops.RES_5_D,
	cpu._prefixops.RES_5_E,
	cpu._prefixops.RES_5_H,
	cpu._prefixops.RES_5_L,
	cpu._prefixops.RES_5_vHL,
	cpu._prefixops.RES_5_A,
	// 0xB0
	cpu._prefixops.RES_6_B,
	cpu._prefixops.RES_6_C,
	cpu._prefixops.RES_6_D,
	cpu._prefixops.RES_6_E,
	cpu._prefixops.RES_6_H,
	cpu._prefixops.RES_6_L,
	cpu._prefixops.RES_6_vHL,
	cpu._prefixops.RES_6_A,
	cpu._prefixops.RES_7_B,
	cpu._prefixops.RES_7_C,
	cpu._prefixops.RES_7_D,
	cpu._prefixops.RES_7_E,
	cpu._prefixops.RES_7_H,
	cpu._prefixops.RES_7_L,
	cpu._prefixops.RES_7_vHL,
	cpu._prefixops.RES_7_A,
	// 0xC0
	cpu._prefixops.SET_0_B,
	cpu._prefixops.SET_0_C,
	cpu._prefixops.SET_0_D,
	cpu._prefixops.SET_0_E,
	cpu._prefixops.SET_0_H,
	cpu._prefixops.SET_0_L,
	cpu._prefixops.SET_0_vHL,
	cpu._prefixops.SET_0_A,
	cpu._prefixops.SET_1_B,
	cpu._prefixops.SET_1_C,
	cpu._prefixops.SET_1_D,
	cpu._prefixops.SET_1_E,
	cpu._prefixops.SET_1_H,
	cpu._prefixops.SET_1_L,
	cpu._prefixops.SET_1_vHL,
	cpu._prefixops.SET_1_A,
	// 0xD0
	cpu._prefixops.SET_2_B,
	cpu._prefixops.SET_2_C,
	cpu._prefixops.SET_2_D,
	cpu._prefixops.SET_2_E,
	cpu._prefixops.SET_2_H,
	cpu._prefixops.SET_2_L,
	cpu._prefixops.SET_2_vHL,
	cpu._prefixops.SET_2_A,
	cpu._prefixops.SET_3_B,
	cpu._prefixops.SET_3_C,
	cpu._prefixops.SET_3_D,
	cpu._prefixops.SET_3_E,
	cpu._prefixops.SET_3_H,
	cpu._prefixops.SET_3_L,
	cpu._prefixops.SET_3_vHL,
	cpu._prefixops.SET_3_A,
	// 0XE0
	cpu._prefixops.SET_4_B,
	cpu._prefixops.SET_4_C,
	cpu._prefixops.SET_4_D,
	cpu._prefixops.SET_4_E,
	cpu._prefixops.SET_4_H,
	cpu._prefixops.SET_4_L,
	cpu._prefixops.SET_4_vHL,
	cpu._prefixops.SET_4_A,
	cpu._prefixops.SET_5_B,
	cpu._prefixops.SET_5_C,
	cpu._prefixops.SET_5_D,
	cpu._prefixops.SET_5_E,
	cpu._prefixops.SET_5_H,
	cpu._prefixops.SET_5_L,
	cpu._prefixops.SET_5_vHL,
	cpu._prefixops.SET_5_A,
	// 0xF0
	cpu._prefixops.SET_6_B,
	cpu._prefixops.SET_6_C,
	cpu._prefixops.SET_6_D,
	cpu._prefixops.SET_6_E,
	cpu._prefixops.SET_6_H,
	cpu._prefixops.SET_6_L,
	cpu._prefixops.SET_6_vHL,
	cpu._prefixops.SET_6_A,
	cpu._prefixops.SET_7_B,
	cpu._prefixops.SET_7_C,
	cpu._prefixops.SET_7_D,
	cpu._prefixops.SET_7_E,
	cpu._prefixops.SET_7_H,
	cpu._prefixops.SET_7_L,
	cpu._prefixops.SET_7_vHL,
	cpu._prefixops.SET_7_A
];